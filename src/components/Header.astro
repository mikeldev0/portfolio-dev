---
import HomeIcon from "../icons/HomeIcon.astro";
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
    {
        title: "Experiencia",
        key: "nav.experience",
        label: "experiencia",
        url: "/#experiencia",
    },
    {
        title: "Proyectos",
        key: "nav.projects",
        label: "proyectos",
        url: "/#proyectos",
    },
    {
        title: "Sobre mí",
        key: "nav.about",
        label: "sobre-mi",
        url: "/#sobre-mi",
    },
    {
        title: "Contacto",
        key: "nav.contact",
        label: "contacto",
        url: "mailto:mikel@mikeldev.com",
    },
];
---

<header
    class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
    <nav
        class="flex px-3 text-xs md:text-sm font-medium rounded-full text-gray-800 dark:text-gray-200 justify-center items-center"
    >
        <div class="mr-2 hover:scale-125 transition">
            <HomeIcon />
        </div>
        <div class="flex items-center">
            {
                navItems.map((link) => (
                    <a
                        class="relative block px-2 py-2 transition hover:text-purple-500 dark:hover:text-purple-400 text-center"
                        aria-label={link.label}
                        href={link.url}
                        data-i18n={link.key}
                    >
                        {link.title}
                    </a>
                ))
            }
        </div>
        <div class="ml-2">
            <ThemeToggle />
        </div>
        <div class="ml-2 relative">
            <select
                id="language-selector"
                class="appearance-none bg-transparent text-gray-800 dark:text-gray-200 text-xs md:text-sm px-2 py-2 pr-6 rounded-md hover:text-purple-500 dark:hover:text-purple-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50"
            >
                <option value="en">English</option>
                <option value="es">Español</option>
                <option value="fr">Français</option>
                <option value="de">Deutsch</option>
                <option value="it">Italiano</option>
            </select>
            <svg
                class="pointer-events-none absolute right-2 top-1/2 h-3 w-3 -translate-y-1/2 text-gray-500 dark:text-gray-300"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 20 20"
            >
                <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 8l4 4 4-4"
                />
            </svg>
        </div>
    </nav>

    <script>
        document.addEventListener("astro:page-load", () => {
            const sections = document.querySelectorAll("section");
            const navItems = document.querySelectorAll("header nav a");

            const callback = (entries: any[]) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        navItems.forEach((item) => {
                            if (
                                item.getAttribute("aria-label") ==
                                entry.target.id
                            ) {
                                item.classList.add("text-yellow-500");
                            } else {
                                item.classList.remove("text-yellow-500");
                            }
                        });
                    }
                });
            };

            const observer = new IntersectionObserver(callback, {
                root: null,
                rootMargin: "0px",
                threshold: 0.3,
            });

            sections.forEach((section) => {
                observer.observe(section);
            });

            // Cleanup function
            document.onvisibilitychange = () => {
                if (document.visibilityState === "hidden") {
                    observer.disconnect();
                } else {
                    sections.forEach((section) => {
                        observer.observe(section);
                    });
                }
            };
        });
    </script>

    <style>
        nav {
            animation: nav-shadown 1s linear both;
            animation-timeline: scroll();
            animation-range: 0 100px;
        }

        @keyframes nav-shadown {
            to {
                @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/70 ring-white/10;
            }
        }
    </style>
</header>

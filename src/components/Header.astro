---
import HomeIcon from "../icons/HomeIcon.astro";
import MenuIcon from "../icons/MenuIcon.astro";
import XIcon from "../icons/XIcon.astro";
import ThemeToggle from "./ThemeToggle.astro";
import LanguageSelector from "./LanguageSelector.astro";

const navItems = [
    {
        title: "Experiencia",
        key: "nav.experience",
        label: "experiencia",
        url: "/#experiencia",
    },
    {
        title: "Proyectos",
        key: "nav.projects",
        label: "proyectos",
        url: "/#proyectos",
    },
    {
        title: "Sobre m√≠",
        key: "nav.about",
        label: "sobre-mi",
        url: "/#sobre-mi",
    },
    {
        title: "Contacto",
        key: "nav.contact",
        label: "contacto",
        url: "mailto:mikel@mikeldev.com",
    },
];
---

<header
    class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
    <nav
        class="flex px-3 text-xs md:text-sm font-medium rounded-full text-gray-800 dark:text-gray-200 items-center justify-between"
    >
        <div class="mr-2 hover:scale-125 transition">
            <HomeIcon />
        </div>

        <div class="hidden md:flex items-center">
            {
                navItems.map((link) => (
                    <a
                        class="relative block px-2 py-2 transition hover:text-purple-500 dark:hover:text-purple-400 text-center"
                        aria-label={link.label}
                        href={link.url}
                        data-i18n={link.key}
                    >
                        {link.title}
                    </a>
                ))
            }
            <div class="ml-2">
                <ThemeToggle />
            </div>
            <LanguageSelector />
        </div>

        <button
            id="menu-toggle"
            class="ml-2 md:hidden hover:scale-110 transition"
            aria-label="Menu"
            type="button"
        >
            <MenuIcon id="menu-open-icon" class="size-5" />
            <XIcon id="menu-close-icon" class="hidden size-5" />
        </button>
    </nav>

    <div
        id="mobile-menu"
        class="hidden md:hidden flex-col items-center px-6 py-4 mt-2 space-y-2 text-sm font-medium rounded-xl text-gray-800 dark:text-gray-200 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md"
    >
        {
            navItems.map((link) => (
                <a
                    class="relative block px-2 py-2 transition hover:text-purple-500 dark:hover:text-purple-400 text-center"
                    aria-label={link.label}
                    href={link.url}
                    data-i18n={link.key}
                >
                    {link.title}
                </a>
            ))
        }
        <div class="pt-2">
            <ThemeToggle />
        </div>
        <LanguageSelector />
    </div>

    <script>
        document.addEventListener("astro:page-load", () => {
            const sections = document.querySelectorAll("section");
            const navItems = document.querySelectorAll(
                "header a[aria-label]:not([href='#'])"
            );

            const mobileMenu = document.getElementById("mobile-menu");
            const menuToggle = document.getElementById("menu-toggle");
            const openIcon = document.getElementById("menu-open-icon");
            const closeIcon = document.getElementById("menu-close-icon");

            menuToggle?.addEventListener("click", () => {
                mobileMenu?.classList.toggle("hidden");
                openIcon?.classList.toggle("hidden");
                closeIcon?.classList.toggle("hidden");
            });

            mobileMenu?.querySelectorAll("a").forEach((link) => {
                link.addEventListener("click", () => {
                    mobileMenu.classList.add("hidden");
                    openIcon?.classList.remove("hidden");
                    closeIcon?.classList.add("hidden");
                });
            });

            const callback = (entries: any[]) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        navItems.forEach((item) => {
                            if (
                                item.getAttribute("aria-label") ==
                                entry.target.id
                            ) {
                                item.classList.add("text-yellow-500");
                            } else {
                                item.classList.remove("text-yellow-500");
                            }
                        });
                    }
                });
            };

            const observer = new IntersectionObserver(callback, {
                root: null,
                rootMargin: "0px",
                threshold: 0.3,
            });

            sections.forEach((section) => {
                observer.observe(section);
            });

            // Cleanup function
            document.onvisibilitychange = () => {
                if (document.visibilityState === "hidden") {
                    observer.disconnect();
                } else {
                    sections.forEach((section) => {
                        observer.observe(section);
                    });
                }
            };
        });
    </script>

    <style>
        nav {
            animation: nav-shadow 1s linear both;
            animation-timeline: scroll();
            animation-range: 0 100px;
        }

        @keyframes nav-shadow {
            to {
                box-shadow: 0 10px 32px 0 rgba(31, 41, 55, 0.15);
                backdrop-filter: blur(6px);
                -webkit-backdrop-filter: blur(6px);
                background: rgba(255, 255, 255, 0.1);
                border-radius: 9999px;
            }
        }
    </style>
</header>
